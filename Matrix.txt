public static class Matrix
{
    //find algebraic residual submatrix
    public static double[,]Dij(double[,]x,int a)
    {
        double[,]temp;
        double[,]result=new double[a,a];
        for(int i=0;i<a;i++)//traversing matrix x by using loop of i&m
        {
            for(int m=0;m<a;m++)
            {
                temp=new double[a-1,a-1];//create residual matrix
                for(int j=0;j<a-1;j++)//j is column, i is row
                {
                  for(int k=0;k<a-1;k++)  
                  {
                      if(j<1&&k<m)
                         temp[k,j]=x[k,j];
                      if(j<1&&k>=m)
                        temp[k,j]=x[k+1,j];
                      if(j>=1&&k<m)
                        temp[k,j]=x[k,j+1];
                      if(j>=1&&k>=m)
                        temp[k,j]=x[k+1,j+1];
                  }                        
                }
                double s=Math.Pow(-1,i+a);//Calculate the symbol of residual matrix
                result[i,m]=s*Ahang(temp,a-1); 
            }
        }
        return result;
    }
    //Calculate determinant value
    public static double Ahang(double[,]x,int a)
    {
        double [,]temp;//save temporary array
        double s=1.0;//save the symbol of residual 
        double result=0.0;// save temporary variable
        if(a==1)
        {
            return x[0,0]*s;
        }
        for(int i=0;i<a;i++)
        {
            temp=new double[a-1,a-1];//create space for residual
            for(int j=0;j<a-1;j++)
            {
                for(int k=0;k<a-1;k++)
                {
                    if(j<1)
                        temp[k,j]=x[k+1,j];
                    else
                        temp[k,j]=x[k+1,j+1];
                }
            }
            s=math.Pow(-1,i);//Calculate symbol of residual
            result+=x[0,i]*Ahang(temp,a-1)*s;//Calculate value by recursive
        }
    }
    //set a matrix to all element is 0
    public static double[,]Ato0(double[,]x)
    {
        int row=x.GetLength(0);
        int col=x.GetLength(1);

        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                x[i,j]=0;
            }
        }
        return x;
    }
    //return a irreversible matrix's inverse matrix
    public static double[,]Ani_dis(double[,]x)
    {
        int row=x.GetLength(0);
        int col=x.GetLength(1);
        double [,]result=new double[col,row];

        result=AmulB(Ani(AmulB(AT(x),x)),AT(x));
        return result;

    }
    //return inverse matrix
    public static double[,]Ani(double[,]x)
    {
        int row=x.GetLength(0);
        int col=x.GetLength(1);
        double [,]result1=new double[row,col];//save algebraic residual submatrix
        double [,]result2=new double[row,col];//save inverse matrix

        if(row!=col)//verify col & row is equal
        {
            return x;
        }
        else
        {
            double m;
            m=Ahang(x,row);//求行列式的模
            if(m==0)//judge if exist inverse matrix
            {
                return 0;
            }
            else
            {
                result1=Dij(x,row);
                double n=1/m;
                for(int i=0;i<row;i++)//Calculate each element of inverse matrix
                {
                    for(int j=0;j<row;j++)
                    {
                        result2[i,j]=n*result1[i,j];
                    }
                }
            }
        }
        return result2;
    }
    //return matrix x multiply matrix y
    //need add verify: if these two matrix can't multiply
    public static double[,]AmulB(double[,]x,double[,]y)
    {
        int rowx=x.GetLength(0);
        int colx=x.GetLength(1);
        int rowy=y.GetLength(0);
        int coly=y.GetLength(1);
        double[,]z=new double [rowx,coly];

        for(int i=0;i<rowx;i++)
        {
            for(int k=0;k<coly;k++)
            {
                double c=0;
                for(int j=0;j<colx;j++)
                {
                    c+=x[i,j]*y[j,k];
                }
                z[i,k]=c;
            }
        }
        return z;
    }
    //return matrix transpose
    public static double[,]AT(double[,]x)
    {
        int row=x.GetLength(0);
        int col=x.GetLength(1);
        double[,]y=new double[col,row];

        for(int i=0;i<row;i++)
        {
            for(j=0;j<col;j++)
            {
                y[j,i]=x[i,j];
            }
        }
    }
  
}